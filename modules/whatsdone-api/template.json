{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "What's Done API",
  "Parameters": {
    "LambdaS3Bucket": {
      "Type": "String"
    },
    "LambdaS3Key": {
      "Type": "String"
    },
    "DomainName": {
      "Type": "String"
    },
    "HostedZoneId": {
      "Type": "String"
    },
    "CertificateArn": {
      "Type": "String"
    },
    "DoneTableName": {
      "Type": "String"
    },
    "UserTableName": {
      "Type": "String"
    },
    "SessionTableName": {
      "Type": "String"
    },
    "SessionSecret": {
      "Type": "String"
    },
    "EnvName": {
      "Type": "String"
    },
    "DbRegion": {
      "Type": "String"
    },
    "WebappDomain": {
      "Type": "String"
    }
  },
  "Mappings": {
    "Variables": {
      "Api": {
        "StageName": "default"
      },
      "CloudFrontDistribution": {
        "HostedZoneId": "Z2FDTNDATAQYW2"
      }
    }
  },
  "Resources": {
    "RecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {"Ref": "HostedZoneId"},
        "Name": {"Fn::Sub": "${DomainName}."},
        "Type": "A",
        "AliasTarget": {
          "DNSName": {"Fn::GetAtt": ["ApiDomainName", "DistributionDomainName"]},
          "HostedZoneId": {"Fn::FindInMap": ["Variables", "CloudFrontDistribution", "HostedZoneId"]}
        }
      }
    },
    "RestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {"Fn::Sub": "What's Done - ${EnvName}"},
        "Description": "API used for What's Done requests",
        "FailOnWarnings": true,
        "Body": {
          "swagger": "2.0",
          "info": {
            "version": "2017-02-25T13:40:34Z",
            "title": "What's Done API"
          },
          "schemes": ["https"],
          "paths": {
            "/{proxy+}": {
              "options": {
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {"$ref": "#/definitions/Empty"},
                    "headers": {
                      "Access-Control-Allow-Origin": {"type": "string"},
                      "Access-Control-Allow-Methods": {"type": "string"},
                      "Access-Control-Allow-Headers": {"type": "string"},
                      "Access-Control-Allow-Credentials": {"type": "string"}
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Credentials": "'true'",
                        "method.response.header.Access-Control-Allow-Origin": {"Fn::Sub": "'https://${WebappDomain}'"}
                      }
                    }
                  },
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "passthroughBehavior": "when_no_match",
                  "type": "mock"
                }
              },
              "x-amazon-apigateway-any-method": {
                "produces": [
                  "application/json"
                ],
                "parameters": [
                  {
                    "name": "proxy",
                    "in": "path",
                    "required": true,
                    "type": "string"
                  }
                ],
                "responses": {},
                "x-amazon-apigateway-integration": {
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "uri": {"Fn::Sub": [
                    "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations",
                    {"LambdaArn": {"Fn::GetAtt": ["GetDonesFunction", "Arn"]}}
                  ]},
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "cacheNamespace": "borr54",
                  "cacheKeyParameters": [
                    "method.request.path.proxy"
                  ],
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            }
          },
          "definitions": {
            "Empty": {
              "type": "object",
              "title": "Empty Schema"
            }
          }
        }
      }
    },
    "ApiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiDeployment"},
        "MethodSettings": [{
          "HttpMethod": "*",
          "ResourcePath": "/*",
          "ThrottlingRateLimit": 10,
          "ThrottlingBurstLimit": 20
        }],
        "RestApiId": {"Ref": "RestApi"},
        "StageName": {"Fn::FindInMap": ["Variables", "Api", "StageName"]}
      }
    },
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {"Ref": "RestApi"}
      }
    },
    "ApiDomainName": {
      "Type": "AWS::ApiGateway::DomainName",
      "Properties": {
        "CertificateArn": {"Ref": "CertificateArn"},
        "DomainName": {"Ref": "DomainName"}
      }
    },
    "LambdaFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:*",
                    "dax:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Describe*",
                    "kms:Get*",
                    "kms:List*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "GetDonesFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": {"Fn::Sub": "${EnvName}-whatsdone-GetDonesFunction"},
        "Description": "What's Done app",
        "Handler": "index.handler",
        "Role": {"Fn::GetAtt": ["LambdaFunctionRole", "Arn"]},
        "Code": {
          "S3Bucket": {
            "Ref": "LambdaS3Bucket"
          },
          "S3Key": {
            "Ref": "LambdaS3Key"
          }
        },
        "KmsKeyArn": "arn:aws:kms:ap-southeast-2:650892143834:key/3594d37f-a06f-4766-aa9a-ef3cb180eff7",
        "Environment": {
          "Variables": {
            "DB_REGION": {"Ref": "DbRegion"},
            "WEBAPP_ORIGIN": {"Fn::Sub": "https://${WebappDomain}"},
            "SESSION_SECRET": {"Ref": "SessionSecret"},
            "DONE_TABLE_NAME": {"Ref": "DoneTableName"},
            "USER_TABLE_NAME": {"Ref": "UserTableName"},
            "SESSION_TABLE_NAME": {"Ref": "SessionTableName"}
          }
        },
        "Runtime": "nodejs6.10",
        "Timeout": "10"
      }
    },
    "GetDonesLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GetDonesFunction", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*"}
      }
    }
  },
  "Outputs": {
    "ApiRootUrl": {
      "Description": "Root URL of What's Done API",
      "Value": {"Fn::Sub": ["https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}", {
        "StageName": {"Fn::FindInMap": ["Variables", "Api", "StageName"]}
      }]}
    }
  }
}
